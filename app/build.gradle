apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'io.fabric' TODO uncomment after Fabric integration

apply from: '../config/quality/quality.gradle'
apply from: 'versioning.gradle'

android {
  compileSdkVersion 25
  buildToolsVersion '25.0.0'

  defaultConfig {
    applicationId 'com.esafirm.androidboilerplate'
    minSdkVersion 16
    targetSdkVersion 25
    testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
    versionCode buildVersionCode()
    versionName appVersion
  }

  signingConfigs {
    // You must set up an environment var before release signing
    // Run: export APP_KEY={password}
    // TODO Add your release keystore in /keystore folder
    release {
      storeFile file('keystore/release.keystore')
      keyAlias 'esa'
      storePassword "$System.env.APP_KEY"
      keyPassword "$System.env.APP_KEY"
    }

    debug {
      storeFile file('keystore/debug.keystore')
      keyAlias 'androiddebugkey'
      storePassword 'android'
      keyPassword 'android'
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release

      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      ext.betaDistributionReleaseNotesFilePath =
          file('../crashlytics_release_notes.txt').absolutePath
    }

    debug {
      versionNameSuffix " Debug"
      debuggable true
    }
  }

  sourceSets {
    def commonTestDir = 'src/commonTest/java'
    test {
      java.srcDir commonTestDir
    }
    androidTest {
      java.srcDir commonTestDir
    }
  }

  //Needed because of this https://github.com/square/okio/issues/58
  lintOptions {
    warning 'InvalidPackage'
  }
}

kapt {
  generateStubs = true
}

play {
  serviceAccountEmail = 'your-service-account-email'
  pk12File = file('key.p12')
  // By default publishes to Alpha channel
  track = 'alpha'
}

dependencies {

  /* --------------------------------------------------- */
  /* > Library Declarations */
  /* --------------------------------------------------- */

  /* Kotlin */
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  /* Play Services */
  final playServiceVersion = '9.6.1'
  compile "com.google.android.gms:play-services-gcm:$playServiceVersion"

  /* Support Libraries */
  final supportLibraryVersion = '25.0.0'
  compile "com.android.support:appcompat-v7:$supportLibraryVersion"
  compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
  compile "com.android.support:cardview-v7:$supportLibraryVersion"
  compile "com.android.support:support-annotations:$supportLibraryVersion"

  /* Retrofit */
  final retrofitVersion = '2.1.0'
  compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
  compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
  compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"

  /* OkHttp */
  final okHttpVersion = '3.4.1'
  compile "com.squareup.okhttp3:okhttp:$okHttpVersion"
  compile "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

  compile 'com.orhanobut:hawk:2.0.1'
  compile 'com.squareup.sqlbrite:sqlbrite:0.5.0'
  compile 'com.github.bumptech.glide:glide:3.7.0'
  compile('com.crashlytics.sdk.android:crashlytics:2.5.7@aar') {
    transitive = true;
  }

  /* RxJava */
  compile 'io.reactivex:rxandroid:1.2.1'
  compile 'io.reactivex:rxjava:1.2.1'

  /* Common & Utility */
  compile 'com.jakewharton.timber:timber:4.3.0'
  compile 'com.github.esafirm.androidcommon:app:0.4.0'

  /* Dagger */
  final daggerVersion = '2.7'
  final daggerCompiler = "com.google.dagger:dagger-compiler:$daggerVersion"

  compile "com.google.dagger:dagger:$daggerVersion"
  provided 'org.glassfish:javax.annotation:10.0-b28'
  kapt daggerCompiler
  kaptTest daggerCompiler
  kaptAndroidTest daggerCompiler

  /* --------------------------------------------------- */
  /* > Testing */
  /* --------------------------------------------------- */

  final dexMakerVersion = '1.4'
  final hamcrestVersion = '1.3'
  final espressoVersion = '2.2.1'
  final runnerVersion = '0.4'

  final jUnit = "junit:junit:4.12"
  final mockitoKotlin = "org.mockito:mockito-core:2.2.15"

  androidTestCompile jUnit
  androidTestCompile mockitoKotlin
  androidTestCompile "com.android.support:support-annotations:$supportLibraryVersion"
  androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
    exclude group: 'com.android.support', module: 'appcompat'
    exclude group: 'com.android.support', module: 'support-v4'
    exclude group: 'com.android.support', module: 'recyclerview-v7'
  }
  androidTestCompile "com.android.support.test.espresso:espresso-core:$espressoVersion"
  androidTestCompile "com.android.support.test:runner:$runnerVersion"
  androidTestCompile "com.android.support.test:rules:$runnerVersion"
  androidTestCompile "com.crittercism.dexmaker:dexmaker:$dexMakerVersion"
  androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:$dexMakerVersion"
  androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:$dexMakerVersion"

  /* Unit Test */
  testCompile jUnit
  testCompile mockitoKotlin
  testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
  testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
  testCompile "org.hamcrest:hamcrest-integration:$hamcrestVersion"
  testCompile 'org.robolectric:robolectric:3.1.4'
}

// Log out test results to console
tasks.matching { it instanceof Test }.all {
  testLogging.events = ["failed", "passed", "skipped"]
}

task createTestResources << {
  def mockMakerFile = new File(
      "$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
  if (System.env.MOCK_MAKER != null) {
    logger.info("Using MockMaker ${System.env.MOCK_MAKER}")
    mockMakerFile.parentFile.mkdirs()
    mockMakerFile.createNewFile()
    mockMakerFile.write(System.env.MOCK_MAKER)
  } else {
    logger.info("Using default MockMaker")
  }
}

